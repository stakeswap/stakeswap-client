/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace OperatorRegistry {
  export type ValidatorStruct = {
    pubKey: PromiseOrValue<BytesLike>;
    signature: PromiseOrValue<BytesLike>;
    depositDataRoot: PromiseOrValue<BytesLike>;
  };

  export type ValidatorStructOutput = [string, string, string] & {
    pubKey: string;
    signature: string;
    depositDataRoot: string;
  };
}

export interface OperatorRegistryInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addValidator((bytes,bytes,bytes32))": FunctionFragment;
    "addValidators((bytes,bytes,bytes32)[])": FunctionFragment;
    "clearValidatorArray()": FunctionFragment;
    "getValidator(uint256)": FunctionFragment;
    "getValidatorStruct(bytes,bytes,bytes32)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "numValidators()": FunctionFragment;
    "owner()": FunctionFragment;
    "popValidators(uint256)": FunctionFragment;
    "removeValidator(uint256,bool)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setWithdrawalCredential(bytes)": FunctionFragment;
    "swapValidator(uint256,uint256)": FunctionFragment;
    "timelock_address()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "addValidator"
      | "addValidators"
      | "clearValidatorArray"
      | "getValidator"
      | "getValidatorStruct"
      | "nominateNewOwner"
      | "nominatedOwner"
      | "numValidators"
      | "owner"
      | "popValidators"
      | "removeValidator"
      | "setTimelock"
      | "setWithdrawalCredential"
      | "swapValidator"
      | "timelock_address"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [OperatorRegistry.ValidatorStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addValidators",
    values: [OperatorRegistry.ValidatorStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "clearValidatorArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorStruct",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numValidators",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "popValidators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimelock",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalCredential",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapValidator",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timelock_address",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearValidatorArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "popValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelock_address",
    data: BytesLike
  ): Result;

  events: {
    "KeysCleared()": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "TimelockChanged(address)": EventFragment;
    "ValidatorAdded(bytes,bytes)": EventFragment;
    "ValidatorArrayCleared()": EventFragment;
    "ValidatorRemoved(bytes,uint256,bool)": EventFragment;
    "ValidatorsPopped(uint256)": EventFragment;
    "ValidatorsSwapped(bytes,bytes,uint256,uint256)": EventFragment;
    "WithdrawalCredentialSet(bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeysCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorArrayCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorsPopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorsSwapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalCredentialSet"): EventFragment;
}

export interface KeysClearedEventObject {}
export type KeysClearedEvent = TypedEvent<[], KeysClearedEventObject>;

export type KeysClearedEventFilter = TypedEventFilter<KeysClearedEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface OwnerNominatedEventObject {
  newOwner: string;
}
export type OwnerNominatedEvent = TypedEvent<
  [string],
  OwnerNominatedEventObject
>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface TimelockChangedEventObject {
  timelock_address: string;
}
export type TimelockChangedEvent = TypedEvent<
  [string],
  TimelockChangedEventObject
>;

export type TimelockChangedEventFilter = TypedEventFilter<TimelockChangedEvent>;

export interface ValidatorAddedEventObject {
  pubKey: string;
  withdrawalCredential: string;
}
export type ValidatorAddedEvent = TypedEvent<
  [string, string],
  ValidatorAddedEventObject
>;

export type ValidatorAddedEventFilter = TypedEventFilter<ValidatorAddedEvent>;

export interface ValidatorArrayClearedEventObject {}
export type ValidatorArrayClearedEvent = TypedEvent<
  [],
  ValidatorArrayClearedEventObject
>;

export type ValidatorArrayClearedEventFilter =
  TypedEventFilter<ValidatorArrayClearedEvent>;

export interface ValidatorRemovedEventObject {
  pubKey: string;
  remove_idx: BigNumber;
  dont_care_about_ordering: boolean;
}
export type ValidatorRemovedEvent = TypedEvent<
  [string, BigNumber, boolean],
  ValidatorRemovedEventObject
>;

export type ValidatorRemovedEventFilter =
  TypedEventFilter<ValidatorRemovedEvent>;

export interface ValidatorsPoppedEventObject {
  times: BigNumber;
}
export type ValidatorsPoppedEvent = TypedEvent<
  [BigNumber],
  ValidatorsPoppedEventObject
>;

export type ValidatorsPoppedEventFilter =
  TypedEventFilter<ValidatorsPoppedEvent>;

export interface ValidatorsSwappedEventObject {
  from_pubKey: string;
  to_pubKey: string;
  from_idx: BigNumber;
  to_idx: BigNumber;
}
export type ValidatorsSwappedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ValidatorsSwappedEventObject
>;

export type ValidatorsSwappedEventFilter =
  TypedEventFilter<ValidatorsSwappedEvent>;

export interface WithdrawalCredentialSetEventObject {
  _withdrawalCredential: string;
}
export type WithdrawalCredentialSetEvent = TypedEvent<
  [string],
  WithdrawalCredentialSetEventObject
>;

export type WithdrawalCredentialSetEventFilter =
  TypedEventFilter<WithdrawalCredentialSetEvent>;

export interface OperatorRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addValidator(
      validator: OperatorRegistry.ValidatorStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addValidators(
      validatorArray: OperatorRegistry.ValidatorStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearValidatorArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getValidator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        pubKey: string;
        withdrawalCredentials: string;
        signature: string;
        depositDataRoot: string;
      }
    >;

    getValidatorStruct(
      pubKey: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      depositDataRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[OperatorRegistry.ValidatorStructOutput]>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    numValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    popValidators(
      times: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeValidator(
      remove_idx: PromiseOrValue<BigNumberish>,
      dont_care_about_ordering: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalCredential(
      _new_withdrawal_pubkey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapValidator(
      from_idx: PromiseOrValue<BigNumberish>,
      to_idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timelock_address(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addValidator(
    validator: OperatorRegistry.ValidatorStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addValidators(
    validatorArray: OperatorRegistry.ValidatorStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearValidatorArray(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getValidator(
    i: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      pubKey: string;
      withdrawalCredentials: string;
      signature: string;
      depositDataRoot: string;
    }
  >;

  getValidatorStruct(
    pubKey: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    depositDataRoot: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<OperatorRegistry.ValidatorStructOutput>;

  nominateNewOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  numValidators(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  popValidators(
    times: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeValidator(
    remove_idx: PromiseOrValue<BigNumberish>,
    dont_care_about_ordering: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock_address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalCredential(
    _new_withdrawal_pubkey: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapValidator(
    from_idx: PromiseOrValue<BigNumberish>,
    to_idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timelock_address(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addValidator(
      validator: OperatorRegistry.ValidatorStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addValidators(
      validatorArray: OperatorRegistry.ValidatorStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    clearValidatorArray(overrides?: CallOverrides): Promise<void>;

    getValidator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        pubKey: string;
        withdrawalCredentials: string;
        signature: string;
        depositDataRoot: string;
      }
    >;

    getValidatorStruct(
      pubKey: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      depositDataRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<OperatorRegistry.ValidatorStructOutput>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    numValidators(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    popValidators(
      times: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeValidator(
      remove_idx: PromiseOrValue<BigNumberish>,
      dont_care_about_ordering: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(
      _timelock_address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalCredential(
      _new_withdrawal_pubkey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapValidator(
      from_idx: PromiseOrValue<BigNumberish>,
      to_idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timelock_address(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "KeysCleared()"(): KeysClearedEventFilter;
    KeysCleared(): KeysClearedEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;

    "TimelockChanged(address)"(
      timelock_address?: null
    ): TimelockChangedEventFilter;
    TimelockChanged(timelock_address?: null): TimelockChangedEventFilter;

    "ValidatorAdded(bytes,bytes)"(
      pubKey?: null,
      withdrawalCredential?: null
    ): ValidatorAddedEventFilter;
    ValidatorAdded(
      pubKey?: null,
      withdrawalCredential?: null
    ): ValidatorAddedEventFilter;

    "ValidatorArrayCleared()"(): ValidatorArrayClearedEventFilter;
    ValidatorArrayCleared(): ValidatorArrayClearedEventFilter;

    "ValidatorRemoved(bytes,uint256,bool)"(
      pubKey?: null,
      remove_idx?: null,
      dont_care_about_ordering?: null
    ): ValidatorRemovedEventFilter;
    ValidatorRemoved(
      pubKey?: null,
      remove_idx?: null,
      dont_care_about_ordering?: null
    ): ValidatorRemovedEventFilter;

    "ValidatorsPopped(uint256)"(times?: null): ValidatorsPoppedEventFilter;
    ValidatorsPopped(times?: null): ValidatorsPoppedEventFilter;

    "ValidatorsSwapped(bytes,bytes,uint256,uint256)"(
      from_pubKey?: null,
      to_pubKey?: null,
      from_idx?: null,
      to_idx?: null
    ): ValidatorsSwappedEventFilter;
    ValidatorsSwapped(
      from_pubKey?: null,
      to_pubKey?: null,
      from_idx?: null,
      to_idx?: null
    ): ValidatorsSwappedEventFilter;

    "WithdrawalCredentialSet(bytes)"(
      _withdrawalCredential?: null
    ): WithdrawalCredentialSetEventFilter;
    WithdrawalCredentialSet(
      _withdrawalCredential?: null
    ): WithdrawalCredentialSetEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addValidator(
      validator: OperatorRegistry.ValidatorStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addValidators(
      validatorArray: OperatorRegistry.ValidatorStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearValidatorArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getValidator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorStruct(
      pubKey: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      depositDataRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    numValidators(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    popValidators(
      times: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeValidator(
      remove_idx: PromiseOrValue<BigNumberish>,
      dont_care_about_ordering: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _timelock_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWithdrawalCredential(
      _new_withdrawal_pubkey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapValidator(
      from_idx: PromiseOrValue<BigNumberish>,
      to_idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timelock_address(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addValidator(
      validator: OperatorRegistry.ValidatorStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addValidators(
      validatorArray: OperatorRegistry.ValidatorStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearValidatorArray(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getValidator(
      i: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorStruct(
      pubKey: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      depositDataRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    popValidators(
      times: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeValidator(
      remove_idx: PromiseOrValue<BigNumberish>,
      dont_care_about_ordering: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock_address: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalCredential(
      _new_withdrawal_pubkey: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapValidator(
      from_idx: PromiseOrValue<BigNumberish>,
      to_idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timelock_address(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
