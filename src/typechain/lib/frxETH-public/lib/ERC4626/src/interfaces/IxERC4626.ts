/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IxERC4626Interface extends utils.Interface {
  functions: {
    "lastRewardAmount()": FunctionFragment;
    "lastSync()": FunctionFragment;
    "rewardsCycleEnd()": FunctionFragment;
    "rewardsCycleLength()": FunctionFragment;
    "syncRewards()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "lastRewardAmount"
      | "lastSync"
      | "rewardsCycleEnd"
      | "rewardsCycleLength"
      | "syncRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "lastRewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastSync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsCycleEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsCycleLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "lastRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastSync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCycleEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCycleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncRewards",
    data: BytesLike
  ): Result;

  events: {
    "NewRewardsCycle(uint32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRewardsCycle"): EventFragment;
}

export interface NewRewardsCycleEventObject {
  cycleEnd: number;
  rewardAmount: BigNumber;
}
export type NewRewardsCycleEvent = TypedEvent<
  [number, BigNumber],
  NewRewardsCycleEventObject
>;

export type NewRewardsCycleEventFilter = TypedEventFilter<NewRewardsCycleEvent>;

export interface IxERC4626 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IxERC4626Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lastRewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastSync(overrides?: CallOverrides): Promise<[number]>;

    rewardsCycleEnd(overrides?: CallOverrides): Promise<[number]>;

    rewardsCycleLength(overrides?: CallOverrides): Promise<[number]>;

    syncRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  lastRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  lastSync(overrides?: CallOverrides): Promise<number>;

  rewardsCycleEnd(overrides?: CallOverrides): Promise<number>;

  rewardsCycleLength(overrides?: CallOverrides): Promise<number>;

  syncRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lastRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lastSync(overrides?: CallOverrides): Promise<number>;

    rewardsCycleEnd(overrides?: CallOverrides): Promise<number>;

    rewardsCycleLength(overrides?: CallOverrides): Promise<number>;

    syncRewards(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewRewardsCycle(uint32,uint256)"(
      cycleEnd?: PromiseOrValue<BigNumberish> | null,
      rewardAmount?: null
    ): NewRewardsCycleEventFilter;
    NewRewardsCycle(
      cycleEnd?: PromiseOrValue<BigNumberish> | null,
      rewardAmount?: null
    ): NewRewardsCycleEventFilter;
  };

  estimateGas: {
    lastRewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    lastSync(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsCycleEnd(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsCycleLength(overrides?: CallOverrides): Promise<BigNumber>;

    syncRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lastRewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastSync(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsCycleEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsCycleLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
