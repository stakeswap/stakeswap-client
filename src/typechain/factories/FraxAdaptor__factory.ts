/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { FraxAdaptor, FraxAdaptorInterface } from "../FraxAdaptor";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "adaptorName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "buyToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canDeposit",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "canWithdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    name: "getETHAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethAmount",
        type: "uint256",
      },
    ],
    name: "getTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTokens",
    outputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "sellToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040524260805234801561001457600080fd5b506001600055608051611839610032600039600050506118396000f3fe6080604052600436106101f25760003560e01c8063ad5c46481161010d578063ce069614116100a0578063ebdfda5e1161006f578063ebdfda5e146104c3578063ef46b2ab146104d8578063f2cd3a12146104f8578063f781b24e1461050d578063fbe85f061461052257600080fd5b8063ce0696141461047e578063d0e30db014610493578063d148d3921461049b578063e0bab4c4146104ae57600080fd5b8063c89d5b8b116100dc578063c89d5b8b1461043f578063c9ac8c8e14610454578063ca8aa0e414610469578063cbc74de7146101fe57600080fd5b8063ad5c4648146103f5578063be78e8d914610315578063c1fe3e481461040a578063c2507ac11461041f57600080fd5b80635a33bbbe11610185578063a482171911610154578063a482171914610387578063aa6430c61461038f578063aa6ca808146103a4578063aaf5eb68146103d957600080fd5b80635a33bbbe14610315578063698e07961461032a57806389a302711461033f5780638c9adb2d1461035457600080fd5b806339443b8e116101c157806339443b8e1461028e5780634aa07e64146102be5780634bc0dcb6146102eb578063565d3e6e1461030057600080fd5b8063020b627d146101fe5780632397e4d71461022b57806323c34a64146102595780632e1a7d4d1461026e57600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b50610213610543565b604051600f9190910b81526020015b60405180910390f35b34801561023757600080fd5b5061024b6102463660046115b7565b610593565b604051908152602001610222565b34801561026557600080fd5b5061024b610642565b34801561027a57600080fd5b5061024b6102893660046115b7565b610671565b34801561029a57600080fd5b506102ae6102a93660046115b7565b6106f3565b6040519015158152602001610222565b3480156102ca57600080fd5b506102d361078a565b6040516001600160a01b039091168152602001610222565b3480156102f757600080fd5b506102d36107ce565b34801561030c57600080fd5b506102d36107f1565b34801561032157600080fd5b50610213610835565b34801561033657600080fd5b506102d3610845565b34801561034b57600080fd5b506102d3610868565b34801561036057600080fd5b5060408051808201825260048152630cce4c2f60e31b6020820152905161022291906115f4565b61024b6108ac565b34801561039b57600080fd5b506102d361092c565b3480156103b057600080fd5b506103b961094f565b604080516001600160a01b03938416815292909116602083015201610222565b3480156103e557600080fd5b5061024b670de0b6b3a764000081565b34801561040157600080fd5b506102d3610960565b34801561041657600080fd5b506102d36109a4565b34801561042b57600080fd5b5061024b61043a3660046115b7565b6109e8565b34801561044b57600080fd5b5061024b610a1d565b34801561046057600080fd5b506102d3610bb0565b34801561047557600080fd5b506102d3610bd3565b34801561048a57600080fd5b506102d3610c17565b61024b610c5b565b61024b6104a9366004611650565b610d53565b3480156104ba57600080fd5b506102d3610e07565b3480156104cf57600080fd5b506102d3610e4b565b3480156104e457600080fd5b5061024b6104f33660046115b7565b610e8f565b34801561050457600080fd5b5061024b610f07565b34801561051957600080fd5b506102d3610f36565b34801561052e57600080fd5b506102ae61053d3660046115b7565b50600090565b6000466001036105535750600190565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064015b60405180910390fd5b600061059d610f59565b600082116105db5760405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b604482015260640161058a565b60006105e561094f565b9150506105f481333086610fb2565b60006105ff84611023565b604051909150339082156108fc029083906000818181858888f1935050505015801561062f573d6000803e3d6000fd5b5091505061063d6001600055565b919050565b60004660010361055357507f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b600061067b610f59565b600082116106b95760405162461bcd60e51b815260206004820152600b60248201526a16915493c8105353d5539560aa1b604482015260640161058a565b60405162461bcd60e51b815260206004820152600f60248201526e43414e4e4f5420574954484452415760881b604482015260640161058a565b60008160000361070557506000919050565b600061070f610e4b565b9050806001600160a01b031663b6d24f186040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077391906116ae565b156107815750600092915050565b50600192915050565b6000466001036107ad5750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b466005036105535750736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b600046600103610553575073dc24316b9ae028f1497c275eb9192a3ea0f6702290565b6000466001036108145750735e8422345238f34275888049021821e8e08caa1f90565b466005036105535750733e04888b1c07a9805861c19551f7ed53145bd8d490565b6000466001036105535750600090565b60004660010361055357507306325440d014e39736583c165c2963ba99faf14e90565b60004660010361088b575073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4890565b466005036105535750732f3a40a3db8a7e3d09b0adfefbce4f6f8192755790565b60006108b6610f59565b600034116108f85760405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b604482015260640161058a565b60006109026110d8565b9050600061090e61094f565b91505061091c81338461120f565b5090506109296001600055565b90565b600046600103610553575073a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b60008061095a610bb0565b90509091565b600046600103610983575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b46600503610553575073b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b6000466001036109c7575073ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b466005036105535750731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b60006109fb670de0b6b3a7640000610e8f565b610a0d83670de0b6b3a76400006116e6565b610a179190611713565b92915050565b600080610a28610bb0565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8e9190611727565b905080600003610aa15760009250505090565b80826001600160a01b0316636fcf5e5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b049190611740565b63ffffffff16836001600160a01b031663bafedcaa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190611766565b610b7a906301e187e061178f565b610b8491906117c1565b610b9690670de0b6b3a764000061178f565b6001600160c01b0316610ba99190611713565b9250505090565b600046600103610814575073ac3e018457b222d93114458476f3e3416abbe38f90565b600046600103610bf6575073ae78736cd615f374d3085123a210448e74fc639390565b46600503610553575073ae78736cd615f374d3085123a210448e74fc639390565b600046600103610c3a575073ba12222222228d8ba445958a75a0704d566bf2c890565b46600503610553575073ba12222222228d8ba445958a75a0704d566bf2c890565b6000610c65610f59565b60003411610ca75760405162461bcd60e51b815260206004820152600f60248201526e16915493c811551208105353d55395608a1b604482015260640161058a565b610cb0346106f3565b610ced5760405162461bcd60e51b815260206004820152600e60248201526d10d0539393d50811115413d4d25560921b604482015260640161058a565b6000610cf7611244565b90506000610d0361094f565b915050610d1181338461120f565b60405182815233907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a25090506109296001600055565b6000806001600160a01b038716610d6b575034610d76565b610d768786886112bd565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101879052600060648201526001600160a01b03861690633df0212490839060840160206040518083038185885af1158015610dd7573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610dfc9190611727565b979650505050505050565b600046600103610e2a5750736b175474e89094c44da98b954eedeac495271d0f90565b4660050361055357507373967c6a0904aa032c103b4104747e88c566b1a290565b600046600103610e6e575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036105535750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6000610e99610bb0565b6001600160a01b0316634cdad506836040518263ffffffff1660e01b8152600401610ec691815260200190565b602060405180830381865afa158015610ee3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a179190611727565b60004660010361055357507f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b600046600103610553575073f43211935c781d5ca1a41d2041f397b8a7366c7a90565b600260005403610fab5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161058a565b6002600055565b6040516001600160a01b038085166024830152831660448201526064810182905261101d9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526113d2565b50505050565b60008061102e610bb0565b604051635d043b2960e11b815260048101859052306024820181905260448201526001600160a01b03919091169063ba087652906064016020604051808303816000875af1158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190611727565b905060006110d06110b76107f1565b836110c061092c565b6110c8610543565b6104a9610835565b949350505050565b6000806110f96000346110e961092c565b6110f1610835565b6104a9610543565b90506111036107f1565b6001600160a01b031663095ea7b3611119610bb0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018490526044016020604051808303816000875af1158015611166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118a91906116ae565b506000611195610bb0565b604051636e553f6560e01b8152600481018490523060248201526001600160a01b039190911690636e553f65906044016020604051808303816000875af11580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112089190611727565b9392505050565b6040516001600160a01b03831660248201526044810182905261123f90849063a9059cbb60e01b90606401610fe6565b505050565b60008061124f610e4b565b604051634dcd454760e01b81523060048201526001600160a01b039190911690634dcd454790349060240160206040518083038185885af1158015611298573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a179190611727565b8015806113375750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113359190611727565b155b6113a25760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161058a565b6040516001600160a01b03831660248201526044810182905261123f90849063095ea7b360e01b90606401610fe6565b6000611427826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114a49092919063ffffffff16565b80519091501561123f578080602001905181019061144591906116ae565b61123f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161058a565b60606110d0848460008585600080866001600160a01b031685876040516114cb91906117e7565b60006040518083038185875af1925050503d8060008114611508576040519150601f19603f3d011682016040523d82523d6000602084013e61150d565b606091505b5091509150610dfc8783838760608315611588578251600003611581576001600160a01b0385163b6115815760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161058a565b50816110d0565b6110d0838381511561159d5781518083602001fd5b8060405162461bcd60e51b815260040161058a91906115f4565b6000602082840312156115c957600080fd5b5035919050565b60005b838110156115eb5781810151838201526020016115d3565b50506000910152565b60208152600082518060208401526116138160408501602087016115d0565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461063d57600080fd5b8035600f81900b811461063d57600080fd5b600080600080600060a0868803121561166857600080fd5b61167186611627565b94506020860135935061168660408701611627565b92506116946060870161163e565b91506116a26080870161163e565b90509295509295909350565b6000602082840312156116c057600080fd5b8151801515811461120857600080fd5b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610a1757610a176116d0565b634e487b7160e01b600052601260045260246000fd5b600082611722576117226116fd565b500490565b60006020828403121561173957600080fd5b5051919050565b60006020828403121561175257600080fd5b815163ffffffff8116811461120857600080fd5b60006020828403121561177857600080fd5b81516001600160c01b038116811461120857600080fd5b6001600160c01b038281168282168181028316929181158285048214176117b8576117b86116d0565b50505092915050565b60006001600160c01b03838116806117db576117db6116fd565b92169190910492915050565b600082516117f98184602087016115d0565b919091019291505056fea2646970667358221220ddbcca651cd369cd82934e8014b8c4a457b969d7813bf2e11cfe0c7232db155264736f6c63430008110033";

type FraxAdaptorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FraxAdaptorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FraxAdaptor__factory extends ContractFactory {
  constructor(...args: FraxAdaptorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FraxAdaptor> {
    return super.deploy(overrides || {}) as Promise<FraxAdaptor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FraxAdaptor {
    return super.attach(address) as FraxAdaptor;
  }
  override connect(signer: Signer): FraxAdaptor__factory {
    return super.connect(signer) as FraxAdaptor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FraxAdaptorInterface {
    return new utils.Interface(_abi) as FraxAdaptorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FraxAdaptor {
    return new Contract(address, _abi, signerOrProvider) as FraxAdaptor;
  }
}
