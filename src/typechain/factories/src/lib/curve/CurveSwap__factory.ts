/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurveSwap,
  CurveSwapInterface,
} from "../../../../src/lib/curve/CurveSwap";

const _abi = [
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d50806100206000396000f3fe60806040526004361061012e5760003560e01c8063be78e8d9116100ab578063ce0696141161006f578063ce06961414610289578063d148d3921461029e578063e0bab4c4146102b1578063ebdfda5e146102c6578063f2cd3a12146102db578063f781b24e146102f057600080fd5b8063be78e8d9146101e1578063c1fe3e481461024a578063c9ac8c8e1461025f578063ca8aa0e414610274578063cbc74de71461013a57600080fd5b80635a33bbbe116100f25780635a33bbbe146101e1578063698e0796146101f657806389a302711461020b578063aa6430c614610220578063ad5c46481461023557600080fd5b8063020b627d1461013a57806323c34a64146101675780634aa07e641461018a5780634bc0dcb6146101b7578063565d3e6e146101cc57600080fd5b3661013557005b600080fd5b34801561014657600080fd5b5061014f610305565b604051600f9190910b81526020015b60405180910390f35b34801561017357600080fd5b5061017c610362565b60405190815260200161015e565b34801561019657600080fd5b5061019f61039e565b6040516001600160a01b03909116815260200161015e565b3480156101c357600080fd5b5061019f6103ef565b3480156101d857600080fd5b5061019f61041f565b3480156101ed57600080fd5b5061014f610470565b34801561020257600080fd5b5061019f61048d565b34801561021757600080fd5b5061019f6104bd565b34801561022c57600080fd5b5061019f61050e565b34801561024157600080fd5b5061019f61053e565b34801561025657600080fd5b5061019f61058f565b34801561026b57600080fd5b5061019f6105e0565b34801561028057600080fd5b5061019f610610565b34801561029557600080fd5b5061019f610661565b61017c6102ac366004610c30565b6106b2565b3480156102bd57600080fd5b5061019f610766565b3480156102d257600080fd5b5061019f6107b7565b3480156102e757600080fd5b5061017c610808565b3480156102fc57600080fd5b5061019f610844565b60004660011480610317575046610760145b156103225750600190565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064015b60405180910390fd5b60004660011480610374575046610760145b1561032257507f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b600046600114806103b0575046610760145b156103ce5750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b466005036103225750736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b60004660011480610401575046610760145b15610322575073dc24316b9ae028f1497c275eb9192a3ea0f6702290565b60004660011480610431575046610760145b1561044f5750735e8422345238f34275888049021821e8e08caa1f90565b466005036103225750733e04888b1c07a9805861c19551f7ed53145bd8d490565b60004660011480610482575046610760145b156103225750600090565b6000466001148061049f575046610760145b1561032257507306325440d014e39736583c165c2963ba99faf14e90565b600046600114806104cf575046610760145b156104ed575073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4890565b466005036103225750732f3a40a3db8a7e3d09b0adfefbce4f6f8192755790565b60004660011480610520575046610760145b15610322575073a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b60004660011480610550575046610760145b1561056e575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b46600503610322575073b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b600046600114806105a1575046610760145b156105bf575073ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b466005036103225750731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b600046600114806105f2575046610760145b1561044f575073ac3e018457b222d93114458476f3e3416abbe38f90565b60004660011480610622575046610760145b15610640575073ae78736cd615f374d3085123a210448e74fc639390565b46600503610322575073ae78736cd615f374d3085123a210448e74fc639390565b60004660011480610673575046610760145b15610691575073ba12222222228d8ba445958a75a0704d566bf2c890565b46600503610322575073ba12222222228d8ba445958a75a0704d566bf2c890565b6000806001600160a01b0387166106ca5750346106d5565b6106d5878688610874565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101879052600060648201526001600160a01b03861690633df0212490839060840160206040518083038185885af1158015610736573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061075b9190610c8e565b979650505050505050565b60004660011480610778575046610760145b156107965750736b175474e89094c44da98b954eedeac495271d0f90565b4660050361032257507373967c6a0904aa032c103b4104747e88c566b1a290565b600046600114806107c9575046610760145b156107e7575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036103225750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b6000466001148061081a575046610760145b1561032257507f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b60004660011480610856575046610760145b15610322575073f43211935c781d5ca1a41d2041f397b8a7366c7a90565b8015806108ee5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec9190610c8e565b155b6109595760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610359565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526109ab9084906109b0565b505050565b6000610a05826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a829092919063ffffffff16565b8051909150156109ab5780806020019051810190610a239190610ca7565b6109ab5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610359565b6060610a918484600085610a99565b949350505050565b606082471015610afa5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610359565b600080866001600160a01b03168587604051610b169190610cf4565b60006040518083038185875af1925050503d8060008114610b53576040519150601f19603f3d011682016040523d82523d6000602084013e610b58565b606091505b509150915061075b8783838760608315610bd3578251600003610bcc576001600160a01b0385163b610bcc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610359565b5081610a91565b610a918383815115610be85781518083602001fd5b8060405162461bcd60e51b81526004016103599190610d10565b80356001600160a01b0381168114610c1957600080fd5b919050565b8035600f81900b8114610c1957600080fd5b600080600080600060a08688031215610c4857600080fd5b610c5186610c02565b945060208601359350610c6660408701610c02565b9250610c7460608701610c1e565b9150610c8260808701610c1e565b90509295509295909350565b600060208284031215610ca057600080fd5b5051919050565b600060208284031215610cb957600080fd5b81518015158114610cc957600080fd5b9392505050565b60005b83811015610ceb578181015183820152602001610cd3565b50506000910152565b60008251610d06818460208701610cd0565b9190910192915050565b6020815260008251806020840152610d2f816040850160208701610cd0565b601f01601f1916919091016040019291505056fea164736f6c6343000811000a";

type CurveSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwap__factory extends ContractFactory {
  constructor(...args: CurveSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveSwap> {
    return super.deploy(overrides || {}) as Promise<CurveSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveSwap {
    return super.attach(address) as CurveSwap;
  }
  override connect(signer: Signer): CurveSwap__factory {
    return super.connect(signer) as CurveSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapInterface {
    return new utils.Interface(_abi) as CurveSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwap {
    return new Contract(address, _abi, signerOrProvider) as CurveSwap;
  }
}
