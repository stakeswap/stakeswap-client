/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CurveSwap, CurveSwapInterface } from "../CurveSwap";

const _abi = [
  {
    inputs: [],
    name: "BalancerV2Vault",
    outputs: [
      {
        internalType: "contract BalancerV2VaultInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_rETH_ETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BalancerV2_wstETH_WETH_POOL_ID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "fromTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "int128",
        name: "fromTokenIndex",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "toTokenIndex",
        type: "int128",
      },
    ],
    name: "Curve_swap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "DAI",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "USDC",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract WETHInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETH",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "frxETHMinter",
    outputs: [
      {
        internalType: "contract frxETHMinter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rETH",
    outputs: [
      {
        internalType: "contract IrETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sfrxETH",
    outputs: [
      {
        internalType: "contract sfrxETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stETH",
    outputs: [
      {
        internalType: "contract ILido",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wstETH",
    outputs: [
      {
        internalType: "contract IWstETH",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c8f806100206000396000f3fe60806040526004361061012e5760003560e01c8063be78e8d9116100ab578063ce0696141161006f578063ce06961414610289578063d148d3921461029e578063e0bab4c4146102b1578063ebdfda5e146102c6578063f2cd3a12146102db578063f781b24e146102f057600080fd5b8063be78e8d9146101e1578063c1fe3e481461024a578063c9ac8c8e1461025f578063ca8aa0e414610274578063cbc74de71461013a57600080fd5b80635a33bbbe116100f25780635a33bbbe146101e1578063698e0796146101f657806389a302711461020b578063aa6430c614610220578063ad5c46481461023557600080fd5b8063020b627d1461013a57806323c34a64146101675780634aa07e641461018a5780634bc0dcb6146101b7578063565d3e6e146101cc57600080fd5b3661013557005b600080fd5b34801561014657600080fd5b5061014f610305565b604051600f9190910b81526020015b60405180910390f35b34801561017357600080fd5b5061017c610355565b60405190815260200161015e565b34801561019657600080fd5b5061019f610384565b6040516001600160a01b03909116815260200161015e565b3480156101c357600080fd5b5061019f6103c8565b3480156101d857600080fd5b5061019f6103eb565b3480156101ed57600080fd5b5061014f61042f565b34801561020257600080fd5b5061019f61043f565b34801561021757600080fd5b5061019f610462565b34801561022c57600080fd5b5061019f6104a6565b34801561024157600080fd5b5061019f6104c9565b34801561025657600080fd5b5061019f61050d565b34801561026b57600080fd5b5061019f610551565b34801561028057600080fd5b5061019f610574565b34801561029557600080fd5b5061019f6105b8565b61017c6102ac366004610b46565b6105fc565b3480156102bd57600080fd5b5061019f6106b0565b3480156102d257600080fd5b5061019f6106f4565b3480156102e757600080fd5b5061017c610738565b3480156102fc57600080fd5b5061019f610767565b6000466001036103155750600190565b60405162461bcd60e51b815260206004820152601060248201526f1d5b9adb9bdddb8818da185a5b881a5960821b60448201526064015b60405180910390fd5b60004660010361031557507f1e19cf2d73a72ef1332c882f20534b6519be027600020000000000000000011290565b6000466001036103a75750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca090565b466005036103155750736320cd32aa674d2898a68ec82e869385fc5f7e2f90565b600046600103610315575073dc24316b9ae028f1497c275eb9192a3ea0f6702290565b60004660010361040e5750735e8422345238f34275888049021821e8e08caa1f90565b466005036103155750733e04888b1c07a9805861c19551f7ed53145bd8d490565b6000466001036103155750600090565b60004660010361031557507306325440d014e39736583c165c2963ba99faf14e90565b600046600103610485575073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4890565b466005036103155750732f3a40a3db8a7e3d09b0adfefbce4f6f8192755790565b600046600103610315575073a1f8a6807c402e4a15ef4eba36528a3fed24e57790565b6000466001036104ec575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b46600503610315575073b4fbf271143f4fbf7b91a5ded31805e42b2208d690565b600046600103610530575073ae7ab96520de3a18e5e111b5eaab095312d7fe8490565b466005036103155750731643e812ae58766192cf7d2cf9567df2c37e9b7f90565b60004660010361040e575073ac3e018457b222d93114458476f3e3416abbe38f90565b600046600103610597575073ae78736cd615f374d3085123a210448e74fc639390565b46600503610315575073ae78736cd615f374d3085123a210448e74fc639390565b6000466001036105db575073ba12222222228d8ba445958a75a0704d566bf2c890565b46600503610315575073ba12222222228d8ba445958a75a0704d566bf2c890565b6000806001600160a01b03871661061457503461061f565b61061f87868861078a565b604051630f7c084960e21b8152600f85810b600483015284900b602482015260448101879052600060648201526001600160a01b03861690633df0212490839060840160206040518083038185885af1158015610680573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106a59190610ba4565b979650505050505050565b6000466001036106d35750736b175474e89094c44da98b954eedeac495271d0f90565b4660050361031557507373967c6a0904aa032c103b4104747e88c566b1a290565b600046600103610717575073bafa44efe7901e04e39dad13167d089c559c113890565b466005036103155750736421d1ca6cd35852362806a2ded2a49b6fa8bef590565b60004660010361031557507f32296969ef14eb0c6d29669c550d4a044913023000020000000000000000008090565b600046600103610315575073f43211935c781d5ca1a41d2041f397b8a7366c7a90565b8015806108045750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108029190610ba4565b155b61086f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161034c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526108c19084906108c6565b505050565b600061091b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109989092919063ffffffff16565b8051909150156108c157808060200190518101906109399190610bbd565b6108c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161034c565b60606109a784846000856109af565b949350505050565b606082471015610a105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161034c565b600080866001600160a01b03168587604051610a2c9190610c0a565b60006040518083038185875af1925050503d8060008114610a69576040519150601f19603f3d011682016040523d82523d6000602084013e610a6e565b606091505b50915091506106a58783838760608315610ae9578251600003610ae2576001600160a01b0385163b610ae25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161034c565b50816109a7565b6109a78383815115610afe5781518083602001fd5b8060405162461bcd60e51b815260040161034c9190610c26565b80356001600160a01b0381168114610b2f57600080fd5b919050565b8035600f81900b8114610b2f57600080fd5b600080600080600060a08688031215610b5e57600080fd5b610b6786610b18565b945060208601359350610b7c60408701610b18565b9250610b8a60608701610b34565b9150610b9860808701610b34565b90509295509295909350565b600060208284031215610bb657600080fd5b5051919050565b600060208284031215610bcf57600080fd5b81518015158114610bdf57600080fd5b9392505050565b60005b83811015610c01578181015183820152602001610be9565b50506000910152565b60008251610c1c818460208701610be6565b9190910192915050565b6020815260008251806020840152610c45816040850160208701610be6565b601f01601f1916919091016040019291505056fea26469706673582212200620bc5216ae5b43af17ae4ad21108ac45fd56b9f549b8a32ac47e6b3cc53fc664736f6c63430008110033";

type CurveSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveSwap__factory extends ContractFactory {
  constructor(...args: CurveSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveSwap> {
    return super.deploy(overrides || {}) as Promise<CurveSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveSwap {
    return super.attach(address) as CurveSwap;
  }
  override connect(signer: Signer): CurveSwap__factory {
    return super.connect(signer) as CurveSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveSwapInterface {
    return new utils.Interface(_abi) as CurveSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveSwap {
    return new Contract(address, _abi, signerOrProvider) as CurveSwap;
  }
}
