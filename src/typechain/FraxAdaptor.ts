/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FraxAdaptorInterface extends utils.Interface {
  functions: {
    "BalancerV2Vault()": FunctionFragment;
    "BalancerV2_rETH_ETH_POOL_ID()": FunctionFragment;
    "BalancerV2_wstETH_WETH_POOL_ID()": FunctionFragment;
    "Curve_frxETH_ETH_POOL_ADDRESS()": FunctionFragment;
    "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS()": FunctionFragment;
    "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH()": FunctionFragment;
    "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH()": FunctionFragment;
    "Curve_stETH_ETH_POOL_ADDRESS()": FunctionFragment;
    "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS()": FunctionFragment;
    "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH()": FunctionFragment;
    "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH()": FunctionFragment;
    "Curve_swap(address,uint256,address,int128,int128)": FunctionFragment;
    "DAI()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "USDC()": FunctionFragment;
    "WETH()": FunctionFragment;
    "adaptorName()": FunctionFragment;
    "buyToken()": FunctionFragment;
    "canDeposit(uint256)": FunctionFragment;
    "canWithdraw(uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "frxETH()": FunctionFragment;
    "frxETHMinter()": FunctionFragment;
    "getAPR()": FunctionFragment;
    "getETHAmount(uint256)": FunctionFragment;
    "getTokenAmount(uint256)": FunctionFragment;
    "getTokens()": FunctionFragment;
    "rETH()": FunctionFragment;
    "sellToken(uint256)": FunctionFragment;
    "sfrxETH()": FunctionFragment;
    "stETH()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "wstETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BalancerV2Vault"
      | "BalancerV2_rETH_ETH_POOL_ID"
      | "BalancerV2_wstETH_WETH_POOL_ID"
      | "Curve_frxETH_ETH_POOL_ADDRESS"
      | "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS"
      | "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH"
      | "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH"
      | "Curve_stETH_ETH_POOL_ADDRESS"
      | "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS"
      | "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH"
      | "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH"
      | "Curve_swap"
      | "DAI"
      | "PRECISION"
      | "USDC"
      | "WETH"
      | "adaptorName"
      | "buyToken"
      | "canDeposit"
      | "canWithdraw"
      | "deposit"
      | "frxETH"
      | "frxETHMinter"
      | "getAPR"
      | "getETHAmount"
      | "getTokenAmount"
      | "getTokens"
      | "rETH"
      | "sellToken"
      | "sfrxETH"
      | "stETH"
      | "withdraw"
      | "wstETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BalancerV2Vault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BalancerV2_rETH_ETH_POOL_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BalancerV2_wstETH_WETH_POOL_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_frxETH_ETH_POOL_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_stETH_ETH_POOL_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "Curve_swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "DAI", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "adaptorName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "frxETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "frxETHMinter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAPR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getETHAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "rETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "sfrxETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "stETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "wstETH", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BalancerV2Vault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BalancerV2_rETH_ETH_POOL_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BalancerV2_wstETH_WETH_POOL_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_frxETH_ETH_POOL_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_stETH_ETH_POOL_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Curve_swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DAI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adaptorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frxETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "frxETHMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAPR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getETHAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sfrxETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wstETH", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface DepositedEventObject {
  account: string;
  ethAmount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface WithdrawnEventObject {
  account: string;
  ethAmount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface FraxAdaptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FraxAdaptorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BalancerV2Vault(overrides?: CallOverrides): Promise<[string]>;

    BalancerV2_rETH_ETH_POOL_ID(overrides?: CallOverrides): Promise<[string]>;

    BalancerV2_wstETH_WETH_POOL_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    Curve_frxETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Curve_stETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    Curve_swap(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<string>,
      fromTokenIndex: PromiseOrValue<BigNumberish>,
      toTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DAI(overrides?: CallOverrides): Promise<[string]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    adaptorName(overrides?: CallOverrides): Promise<[string]>;

    buyToken(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    frxETH(overrides?: CallOverrides): Promise<[string]>;

    frxETHMinter(overrides?: CallOverrides): Promise<[string]>;

    getAPR(overrides?: CallOverrides): Promise<[BigNumber]>;

    getETHAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAmount(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    rETH(overrides?: CallOverrides): Promise<[string]>;

    sellToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sfrxETH(overrides?: CallOverrides): Promise<[string]>;

    stETH(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wstETH(overrides?: CallOverrides): Promise<[string]>;
  };

  BalancerV2Vault(overrides?: CallOverrides): Promise<string>;

  BalancerV2_rETH_ETH_POOL_ID(overrides?: CallOverrides): Promise<string>;

  BalancerV2_wstETH_WETH_POOL_ID(overrides?: CallOverrides): Promise<string>;

  Curve_frxETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<string>;

  Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS(
    overrides?: CallOverrides
  ): Promise<string>;

  Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Curve_stETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<string>;

  Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS(
    overrides?: CallOverrides
  ): Promise<string>;

  Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  Curve_swap(
    fromToken: PromiseOrValue<string>,
    fromTokenAmount: PromiseOrValue<BigNumberish>,
    pool: PromiseOrValue<string>,
    fromTokenIndex: PromiseOrValue<BigNumberish>,
    toTokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DAI(overrides?: CallOverrides): Promise<string>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  adaptorName(overrides?: CallOverrides): Promise<string>;

  buyToken(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canDeposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canWithdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  frxETH(overrides?: CallOverrides): Promise<string>;

  frxETHMinter(overrides?: CallOverrides): Promise<string>;

  getAPR(overrides?: CallOverrides): Promise<BigNumber>;

  getETHAmount(
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAmount(
    ethAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokens(
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  rETH(overrides?: CallOverrides): Promise<string>;

  sellToken(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sfrxETH(overrides?: CallOverrides): Promise<string>;

  stETH(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wstETH(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BalancerV2Vault(overrides?: CallOverrides): Promise<string>;

    BalancerV2_rETH_ETH_POOL_ID(overrides?: CallOverrides): Promise<string>;

    BalancerV2_wstETH_WETH_POOL_ID(overrides?: CallOverrides): Promise<string>;

    Curve_frxETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<string>;

    Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<string>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_stETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<string>;

    Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<string>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_swap(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<string>,
      fromTokenIndex: PromiseOrValue<BigNumberish>,
      toTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DAI(overrides?: CallOverrides): Promise<string>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    adaptorName(overrides?: CallOverrides): Promise<string>;

    buyToken(overrides?: CallOverrides): Promise<BigNumber>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    frxETH(overrides?: CallOverrides): Promise<string>;

    frxETHMinter(overrides?: CallOverrides): Promise<string>;

    getAPR(overrides?: CallOverrides): Promise<BigNumber>;

    getETHAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmount(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    rETH(overrides?: CallOverrides): Promise<string>;

    sellToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sfrxETH(overrides?: CallOverrides): Promise<string>;

    stETH(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wstETH(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Deposited(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      ethAmount?: null
    ): DepositedEventFilter;
    Deposited(
      account?: PromiseOrValue<string> | null,
      ethAmount?: null
    ): DepositedEventFilter;

    "Withdrawn(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      ethAmount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      account?: PromiseOrValue<string> | null,
      ethAmount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    BalancerV2Vault(overrides?: CallOverrides): Promise<BigNumber>;

    BalancerV2_rETH_ETH_POOL_ID(overrides?: CallOverrides): Promise<BigNumber>;

    BalancerV2_wstETH_WETH_POOL_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_frxETH_ETH_POOL_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_stETH_ETH_POOL_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    Curve_swap(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<string>,
      fromTokenIndex: PromiseOrValue<BigNumberish>,
      toTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DAI(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    adaptorName(overrides?: CallOverrides): Promise<BigNumber>;

    buyToken(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    frxETH(overrides?: CallOverrides): Promise<BigNumber>;

    frxETHMinter(overrides?: CallOverrides): Promise<BigNumber>;

    getAPR(overrides?: CallOverrides): Promise<BigNumber>;

    getETHAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAmount(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokens(overrides?: CallOverrides): Promise<BigNumber>;

    rETH(overrides?: CallOverrides): Promise<BigNumber>;

    sellToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sfrxETH(overrides?: CallOverrides): Promise<BigNumber>;

    stETH(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wstETH(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BalancerV2Vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BalancerV2_rETH_ETH_POOL_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BalancerV2_wstETH_WETH_POOL_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_frxETH_ETH_POOL_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_frxETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_frxETH_ETH_POOL_TOKEN_INDEX_frxETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_stETH_ETH_POOL_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_stETH_ETH_POOL_LP_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_ETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_stETH_ETH_POOL_TOKEN_INDEX_stETH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Curve_swap(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      pool: PromiseOrValue<string>,
      fromTokenIndex: PromiseOrValue<BigNumberish>,
      toTokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DAI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adaptorName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyToken(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canDeposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    frxETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frxETHMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAPR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETHAmount(
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAmount(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellToken(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sfrxETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wstETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
